{
    "name": "Ã…",
    "scopeName": "source.aa",
    "patterns": [
      { "include": "#pre-processing" },
      { "include": "#comment" },
      { "include": "#declerations" },
      { "include": "#directives" }
    ],
    "repository": {
      "declerations": {
        "patterns": [
          { "include": "#other-modifier" },
          { "include": "#storage-modifier" },
          { "include": "#namespace-decleration" },
          { "include": "#class-decleration" },
          { "include": "#enum-decleration" },
          { "include": "#function-decleration" }
        ]
      },
      "class-members": {
        "patterns": [
          { "include": "#other-modifier" },
          { "include": "#storage-modifier" },
          { "include": "#class-decleration" },
          { "include": "#enum-decleration" },
          { "include": "#function-decleration" },
          { "include": "#constructor-decleration" }
        ]
      },
      "directives": {
        "patterns": [
          { "include": "#using-directive" }
        ]
      },
      "statement": {
        "patterns": [
          { "include": "#if-statement" },
          { "include": "#for-statement" },
          { "include": "#while-statement" },
          { "include": "#new-statement" }
        ]
      },
      "expression": {
        "patterns": [
          { "include": "#match-expression" },
          { "include": "#literal" }
        ]
      },
      "literal": {
        "patterns": [
          {
            "include": "#boolean-literal"
          },
          {
            "include": "#null-literal"
          },
          {
            "include": "#numeric-literal"
          },
          {
            "include": "#char-literal"
          },
          {
            "include": "#string-literal"
          }
        ]
      },
      "comment": {
        "begin": "//",
        "end": "\n",
        "name": "comment"
      },
      "using-directive": {
        "patterns": [
          {
            "begin": "\\b(using)\\s+\\S+\\s+(from)\\s+",
            "beginCaptures": {
              "1": {
                "name": "keyword.other.using"
              },
              "2": {
                "name": "keyword.other.using"
              }
            },
            "end": "(?=;)",
            "patterns": [
              {
                "include": "#comment"
              },
              {
                "name": "entity.name.type",
                "match": "@?[_[:alpha:]][_[:alnum:]]*"
              }
            ]
          },
          {
            "begin": "\\b(using)\\s+",
            "beginCaptures": {
              "1": {
                "name": "keyword.other.using"
              }
            },
            "end": "(?=;)",
            "patterns": [
              {
                "include": "#comment"
              },
              {
                "name": "entity.name.type",
                "match": "@?[_[:alpha:]][_[:alnum:]]*"
              }
            ]
          }
        ]
      },
      "storage-modifier": {
        "name": "storage.modifier.cs",
        "match": "(?<!\\.)\\b(abstract|virtual|override|static|const)\\b"
      },
      "access-modifier": {
        "name": "storage.modifier.cs",
        "match": "(?<!\\.)\\b(public|protected|internal|private|sealed)\\b"
      },
      "other-modifier": {
        "name": "storage.modifier.cs",
        "match": "(?<!\\.)\\b(new|sealed|tagged)\\b"
      },
      "namespace-decleration": {
        "begin": "\\b(namespace)\\s+",
        "beginCaptures": {
          "1": {
            "name": "keyword.word"
          }
        },
        "end": "(?<=\\})",
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "name": "entity.name.type",
            "match": "@?[_[:alpha:]][_[:alnum:]]*"
          },
          {
            "begin": "\\{",
            "beginCaptures": {
              "0": {
                "name": "punctuation.curlybrace.open.cs"
              }
            },
            "end": "\\}",
            "endCaptures": {
              "0": {
                "name": "punctuation.curlybrace.close.cs"
              }
            },
            "patterns": [
              {
                "include": "#declerations"
              },
              {
                "include": "#expression"
              }
            ]
          }
        ]
      },
      "class-decleration": {
        "begin": "(?=\\bclass\\b)",
        "beginCaptures": {
          "1": {
            "name": "keyword.word"
          }
        },
        "end": "(?<=\\})|(?=;)",
        "patterns": [
          {
            "begin": "(?x)\n\\b(class)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
            "beginCaptures": {
              "1": {
                "name": "keyword.other.class.cs"
              },
              "2": {
                "name": "entity.name.type.class.cs"
              }
            },
            "end": "(?=\\{)|(?=;)",
            "patterns": [
              {
                "include": "#comment"
              },
              {
                "include": "#parenthesized-parameter-list"
              }
            ]
          },
          {
            "begin": "\\{",
            "beginCaptures": {
              "0": {
                "name": "punctuation.curlybrace.open.cs"
              }
            },
            "end": "\\}",
            "endCaptures": {
              "0": {
                "name": "punctuation.curlybrace.close.cs"
              }
            },
            "patterns": [
              {
                "include": "#comment"
              },
              {
                "include": "#class-members"
              }
            ]
          },
          {
            "include": "#comment"
          }
        ]
      },
      "enum-decleration": {
        "begin": "(?=\\benum\\b)",
        "beginCaptures": {
          "1": {
            "name": "keyword.word"
          }
        },
        "end": "(?<=\\})",
        "patterns": [
          {
            "begin": "(?x)\n\\b(enum)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
            "beginCaptures": {
              "1": {
                "name": "keyword.other.class.cs"
              },
              "2": {
                "name": "entity.name.type.class.cs"
              }
            },
            "end": "(?=\\{)",
            "patterns": [
              {
                "include": "#comment"
              }
            ]
          },
          {
            "begin": "\\{",
            "beginCaptures": {
              "0": {
                "name": "punctuation.curlybrace.open.cs"
              }
            },
            "end": "\\}",
            "endCaptures": {
              "0": {
                "name": "punctuation.curlybrace.close.cs"
              }
            },
            "patterns": [
              {
                "include": "#comment"
              },
              {
                "include": "#function-decleration"
              }
            ]
          },
          {
            "include": "#comment"
          }
        ]
      },
      "function-decleration": {
        "begin": "(?x)\n(?<return-type>\n  (?<type-name>\n(?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name-and-type-args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\n    )\n  )\\s+\n)\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\n(\\g<identifier>)\\s*\n(<([^<>]+)>)?\\s*\n(?=\\()",
        "beginCaptures": {
          "1": {
            "patterns": [
              {
                "include": "#type"
              }
            ]
          },
          "8": {
            "name": "entity.name.function.cs"
          }
        },
        "end": "(?<=\\})|(?=;)",
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "include": "#parenthesized-parameter-list"
          },
          {
            "include": "#expression"
          }
        ]
      },
      "constructor-decleration": {
        "begin": "(?=@?[_[:alpha:]][_[:alnum:]]*\\s*\\()",
        "end": "(?<=\\})|(?=;)",
        "patterns": [
          {
            "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
            "captures": {
              "1": {
                "name": "entity.name.type.class.cs"
              }
            }
          },
          {
            "begin": "(:)",
            "beginCaptures": {
              "1": {
                "name": "punctuation.separator.colon.cs"
              }
            },
            "end": "(?=\\{|=>)",
            "patterns": [
              {
                "include": "#constructor-initializer"
              }
            ]
          },
          {
            "include": "#parenthesized-parameter-list"
          },
          {
            "include": "#preprocessor"
          },
          {
            "include": "#comment"
          },
          {
            "include": "#expression"
          }
        ]
      },
      "type-parameter-list": {
        "begin": "\\<",
        "beginCaptures": {
          "0": {
            "name": "punctuation.definition.typeparameters.begin.cs"
          }
        },
        "end": "\\>",
        "endCaptures": {
          "0": {
            "name": "punctuation.definition.typeparameters.end.cs"
          }
        },
        "patterns": [
          {
            "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
            "captures": {
              "1": {
                "name": "entity.name.type.type-parameter.cs"
              }
            }
          },
          {
            "include": "#comment"
          },
          {
            "include": "#punctuation-comma"
          },
          {
            "include": "#attribute-section"
          }
        ]
      },
      "type": {
        "name": "meta.type.cs",
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "include": "#type-builtin"
          },
          {
            "include": "#type-name"
          }
        ]
      },
      "type-builtin": {
        "match": "\\b(bool|char|double|float|int|string|void)\\b",
        "captures": {
          "1": {
            "name": "keyword.type.cs"
          }
        }
      },
      "type-name": {
        "patterns": [
          {
            "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
            "captures": {
              "1": {
                "name": "entity.name.type.alias.cs"
              },
              "2": {
                "name": "punctuation.separator.coloncolon.cs"
              }
            }
          },
          {
            "match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
            "captures": {
              "1": {
                "name": "storage.type.cs"
              },
              "2": {
                "name": "punctuation.accessor.cs"
              }
            }
          },
          {
            "match": "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)",
            "captures": {
              "1": {
                "name": "punctuation.accessor.cs"
              },
              "2": {
                "name": "storage.type.cs"
              }
            }
          },
          {
            "name": "storage.type.cs",
            "match": "@?[_[:alpha:]][_[:alnum:]]*"
          }
        ]
      },
      "parenthesized-parameter-list": {
        "begin": "(\\()",
        "beginCaptures": {
          "0": {
            "name": "punctuation.parenthesis.open.cs"
          }
        },
        "end": "(\\))",
        "endCaptures": {
          "0": {
            "name": "punctuation.parenthesis.close.cs"
          }
        },
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "include": "#parameter"
          },
          {
            "include": "#punctuation-comma"
          }
        ]
      },
      "parameter": {
        "match": "(?x)\n(?:(?:\\b(params|this)\\b)\\s+)?\n(?<type-name>\n  (?:\n    (?:ref\\s+)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name-and-type-args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\n  )\n)\\s+\n(\\g<identifier>)",
        "captures": {
          "1": {
            "name": "storage.modifier.cs"
          },
          "2": {
            "patterns": [
              {
                "include": "#type"
              }
            ]
          },
          "7": {
            "name": "entity.name.variable.parameter.cs"
          }
        }
      },
      "boolean-literal": {
        "patterns": [
          {
            "name": "constant.language.boolean.true.cs",
            "match": "(?<!\\.)\\btrue\\b"
          },
          {
            "name": "constant.language.boolean.false.cs",
            "match": "(?<!\\.)\\bfalse\\b"
          }
        ]
      },
      "null-literal": {
        "name": "constant.language.null.cs",
        "match": "(?<!\\.)\\bnull\\b"
      },
      "numeric-literal": {
        "patterns": [
          {
            "name": "constant.numeric.hex.cs",
            "match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
          },
          {
            "name": "constant.numeric.binary.cs",
            "match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
          },
          {
            "name": "constant.numeric.decimal.cs",
            "match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
          },
          {
            "name": "constant.numeric.decimal.cs",
            "match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
          },
          {
            "name": "constant.numeric.decimal.cs",
            "match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
          },
          {
            "name": "constant.numeric.decimal.cs",
            "match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
          }
        ]
      },
      "char-literal": {
        "name": "string.quoted.single.cs",
        "begin": "'",
        "beginCaptures": {
          "0": {
            "name": "punctuation.definition.char.begin.cs"
          }
        },
        "end": "(\\')|((?:[^\\\\\\n])$)",
        "endCaptures": {
          "1": {
            "name": "punctuation.definition.char.end.cs"
          },
          "2": {
            "name": "invalid.illegal.newline.cs"
          }
        },
        "patterns": [
          {
            "include": "#char-character-escape"
          }
        ]
      },
      "char-character-escape": {
        "name": "constant.character.escape.cs",
        "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
      },
      "string-literal": {
        "name": "string.quoted.double.cs",
        "begin": "(?<!@)\"",
        "beginCaptures": {
          "0": {
            "name": "punctuation.definition.string.begin.cs"
          }
        },
        "end": "(\")|((?:[^\\\\\\n])$)",
        "endCaptures": {
          "1": {
            "name": "punctuation.definition.string.end.cs"
          },
          "2": {
            "name": "invalid.illegal.newline.cs"
          }
        },
        "patterns": [
          {
            "include": "#string-character-escape"
          }
        ]
      },
      "string-character-escape": {
        "name": "constant.character.escape.cs",
        "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})"
      },
      "match-expression": {
        "begin": "\\b(match)",
        "beginCaptures": {
          "0": {
            "name": "keyword.control.switch.cs"
          }
        },
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "include": "#match-case-expression"
          }
        ],
        "end": "(?<=\\})"
      },
      "match-case-expression": {
        "begin": "\\b(case)",
        "beginCaptures": {
          "0": {
            "name": "keyword.control.case.cs"
          }
        },
        "end": "(?<=\\})|(?=,)",
        "patterns": [
          {
            "include": "#comment"
          },
          {
            "include": "#expression"
          }
        ]
      }
    }
}
